#lang racket
(require "mk.rkt")

(defrel (apply-Go G e t)
  (fresh (a G^)
         (== `(,a . ,G^) G)
         (fresh (aa da)
                (== `(,aa . ,da) a)
                (conde
                 ((== aa e) (== da t))
                 ((=/= aa e) (apply-Go G^ e t))))))

(defrel (cdro ls o)
  (fresh (a)
         (== (cons a o) ls)))

(defrel (conso a d ls)
  (== `(,a . ,d) ls))

(defrel (caro ls o)
  (fresh (d)
         (== (cons o d) ls)))

(defrel  (!- G e t)
  (conde 
   ((symbolo e) (apply-Go G e t))
   ((fresh (teste anse elsee)
           (== `(if ,teste ,anse ,elsee) e)
           (!- G teste 'Bool)
           (!- G anse t)
           (!- G elsee t)))
   ((fresh (x b)
           (== `(lambda (,x) ,b) e)
           #;
           (symbolo x)
           (fresh (tx tb)          
                  (== `(,tx -> ,tb) t)
                  (!- `((,x . ,tx) . ,G) b tb))))
   ((fresh (e1 arg)
           (== `(,e1 ,arg) e)
           (fresh (targ)
                  (!- G e1 `(,targ -> ,t))
                  (!- G arg targ))))
   ((fresh (fn ta tr t1)
           (== `(fix ,fn) e)
           (== `(,ta -> ,tr) t1)
           (== tr t)
           (!- G fn t1)))
   ((== t 'Bool)
    (conde
     ((== #t e))
     ((== #f e))))
   
   ((fresh (a)
           (== `(not ,a) e)
           (== 'Bool t)
           (!- G a 'Bool)))
   ((fresh (n)
           (== `(sub1 ,n) e)
           (== 'Nat t)
           (!- G n 'Nat))) 
   ((fresh (a)
           (== `(zero? ,a) e)
           (== 'Bool t)
           (!- G a 'Nat)))
   ((fresh (a b)
           (== `(* ,a ,b) e)
           (== 'Nat t)
           (!- G a 'Nat)
           (!- G b 'Nat)))
   
   ((fresh (ne1 ne2)
           (== `(+ ,ne1 ,ne2) e)
           (== 'Nat t)
           (!- G ne1 'Nat)
           (!- G ne2 'Nat)))
   ((fresh (a d ta td)
           (== `(cons ,a ,d) e)
           (== `(pairof ,ta ,td) t)
           (!- G a ta)
           (!- G d td)))   
   ((fresh (ls ta td)
           (== `(car ,ls) e)
           (== `(pairof ,t ,td) ta)
           (!- G ls ta)
           ))
   ((fresh (ls ta td)
           (== `(cdr ,ls) e)
           (== `(pairof ,ta ,t) td)
           (!- G ls td)
           ))
   
   ((numbero e) (== 'Nat t))))
